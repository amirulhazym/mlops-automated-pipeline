# .github/workflows/ci_pipeline.yml
name: P2 - MLOps CI Pipeline

on:
  push:
    branches: [ main, develop ] # Triggers on push to main or develop branches
  pull_request:
    branches: [ main ]         # Triggers on pull requests targeting the main branch
  workflow_dispatch:           # Allows you to run this workflow manually from the Actions tab

jobs:
  lint-and-test:
    name: Lint & Unit Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # We use Python 3.11 for our project

      # This is the step that has been corrected
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt      # <-- CORRECTED: Install main application dependencies
          pip install -r requirements-dev.txt  # Install development/testing dependencies

      - name: Lint with Flake8
        run: |
          # Run flake8 to check for code style issues and potential bugs
          # The command will check all files in the src/ and tests/ directories
          flake8 src/ tests/ --count --show-source --statistics

      - name: Test with Pytest
        run: pytest tests/

  build-training-docker:
    name: Build Training Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test # This job will only run if the 'lint-and-test' job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          # This command builds our Docker image using the Dockerfile.train we created.
          # It tags the image with the unique Git commit SHA for traceability.
          docker build -t p2_training_env:ci-build-${{ github.sha }} -f Dockerfile.train .

      - name: Inspect Docker image (optional)
        run: |
          # This step is just for verification in the CI logs.
          docker images p2_training_env